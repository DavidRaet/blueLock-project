Blue Lock Character Explorer - Project Requirements &
Specification
üìã Project Goal
You will build a Blue Lock Character Explorer - a React web application that allows users to discover Blue
Lock characters through API calls while implementing an interactive filtering system. This project will teach
you fundamental API integration concepts while working with real anime character data.


üéØ What Your Website Must Display
Main Interface Layout
Your application should have two main sections:

 1. Character Discovery Panel (left side)
 2. Ban List Management Panel (right side)

Character Discovery Panel Requirements
This panel must contain:

1. Discovery Button

    A prominent button labeled "Discover New Player" or similar

    Clicking this button will trigger a new API request
    Button should show loading state during API calls

2. Character Display Area When a character is loaded, display exactly these elements:

    Character Image: Portrait/photo of the character
    Character Name: Full name as a clickable element

    Position: Playing position (Striker, Midfielder, etc.) as a clickable element
    Team Assignment: Which Blue Lock team they belong to as a clickable element

    Special Weapon/Skill: Their signature ability as a clickable element
    Goals Scored: Numerical statistic (not clickable)
    Current Ranking: Their ranking number in Blue Lock (not clickable)

3. Loading State
    Show a spinner or loading message during API requests
    Hide character data while loading

4. Empty State

    When no character is loaded, show instructions to click the discovery button

Ban List Management Panel Requirements
1. Ban List Title

    Clear heading like "Banned Attributes" or "Filtered Out"

2. Ban List Display

    Show all currently banned attribute-value pairs
    Each banned item should display: "AttributeType: Value" (e.g., "Position: Striker")

    Each banned item needs a remove button (X or similar)

3. Empty Ban List State

    When no items are banned, show explanatory text about how to use the feature

4. Instructions Box

    Small info section explaining how the ban system works


‚öôÔ∏è Required Functionality Specifications
Core API Behavior
    Single Result Display: Only show ONE character at a time, never a list
    Fresh Data: Each button click must make a new API request

    Random Results: API calls should return seemingly random characters
    Consistent Structure: Every character must have the same 6 data fields

Interactive Ban System
    Clickable Attributes: Name, Position, Team, and Weapon must be clickable buttons

    Ban Addition: Clicking any attribute immediately adds it to the ban list

    Visual Feedback: Banned attributes should appear disabled/grayed out on current character

    Ban Removal: Clicking X next to banned item removes it from list
    Active Filtering: Future API calls must NOT return characters with banned attribute values

Example Ban System Flow
 1. User discovers "Yoichi Isagi" who plays "Striker" for "Team Z"

 2. User clicks on "Striker" button ‚Üí "Position: Striker" added to ban list
 3. User clicks "Discover New Player" again

 4. API call happens, but NO strikers will be shown in results
 5. User sees a midfielder or defender instead
 6. User can click X next to "Position: Striker" in ban list to remove the filter



üé® Visual Design Requirements
Theme & Styling
    Color Scheme: Blue/cyan theme to match Blue Lock aesthetic
    Layout: Two-column layout (character left, ban list right)

    Cards: Use card-style containers for both main sections

    Buttons: Styled buttons for all interactive elements
    Responsive: Must work on both desktop and mobile

Interactive Elements
    Hover Effects: Buttons should change appearance on hover
    Loading States: Visual feedback during API calls

    Disabled States: Banned attributes should look different
    Smooth Transitions: Animations for state changes


üîå API Integration Requirements
Data Source Options
You can use any of these APIs:

 1. Jikan API (recommended): https://api.jikan.moe/v4/anime/49596/characters

 2. Custom JSON: Create your own Blue Lock character data file

 3. Mock API: Use a service like JSONPlaceholder with transformed data
Required API Response Handling
      Error Handling: Gracefully handle failed API calls

      Loading States: Show loading while waiting for response

      Data Transformation: Convert API response into your character format
      Random Selection: If API returns multiple characters, randomly select one

Character Data Structure
Your application should work with this data format:

  javascript

  {
      id: unique_identifier,
      name: "Character Name",
      position: "Striker|Midfielder|Defender|Goalkeeper",
      team: "Team Z|Team Y|Team X|Team W|Team V",
      weapon: "Special Skill/Ability",
      goals: numerical_value,
      ranking: numerical_value,
      image: "image_url"
  }




üìù Implementation Checklist
React Components & Hooks
  Use useState for character data
  Use useState for loading state
  Use useState for ban list array
  Use useEffect if needed for side effects
  Create reusable components for repeated elements

API Integration
  Implement fetch() or axios for API calls
  Handle async operations with async/await
  Transform API response data to match your format
  Implement error handling with try/catch

Ban List Logic
  Function to add items to ban list (avoid duplicates)
  Function to remove items from ban list
  Function to check if attribute is banned
  Filter logic to prevent banned characters from displaying

User Interface
  Responsive design with CSS/Tailwind
  Interactive buttons with proper event handlers
  Loading spinners/states
  Empty states with helpful text
  Visual feedback for user actions


üöÄ Success Criteria
Your project will be successful when:

 1. Button creates fresh API calls with each click

 2. Exactly one character displays with all 6 required attributes plus image
 3. Random results appear from API calls
 4. Clicking attributes adds them to ban list immediately

 5. Ban list actively prevents those attributes from appearing in future results

 6. Users can remove bans and see those attributes again

 7. Interface is intuitive and provides clear feedback


üí° Development Tips
    Start Simple: Build the basic API call and display first

    Add Features Gradually: Implement ban list after basic functionality works
    Test Edge Cases: What happens with empty responses or API failures?
    Use Console Logs: Debug your API responses and state changes

    Plan Your State: Think about what data needs to persist between renders

This specification gives you everything needed to build a functional Blue Lock Character Explorer that meets
all technical requirements while providing an engaging user experience!
